template(name="doc")
    .ui.card(class=card_class)
        // if embed
        //     .rounded.full
        //         |!{embed}
        // else
        if is_image
            img.ui.centered.image.pointer.zoomer.toggle_view(src=url)
        else if watson.metadata.image
            img.ui.rounded.inline.pointer.zoomer.image.toggle_view(src=watson.metadata.image)    

        .content
            span.ui.pointer.text.invert.f13.zoomer.toggle_view(class=post_header_class) #{title}
                // small #{max_emotion_name}
            // |#{points}
                // unless one_post
                //     i.chevron.right.big.circular.grey.link.icon.forward
            if viewing_doc
                .ui.circular.icon.basic.button.vote_down
                    i.caret.down.big.grey.icon
                .ui.circular.icon.basic.button.vote_up
                    i.caret.up.big.grey.icon
                .ui.circular.icon.big.basic.button.read 
                    i.rss.icon
                    |read
                // if is_image
                //     img.ui.centered.image(src=url)
                span.invert
                    |!{embed}
                // else if is_twitter
                //     blockquote.twitter-tweet(data-dnt='true' data-theme='dark')
                //         p(lang='en' dir='ltr')
                //             | Twitter Support you must have the patience of 1000 camels waiting for a drink of water while the baby camels get the first drinks...does that make sense? Thank you for your dedication and time you selfishly give to each of us. You are always appreciated.
                //         | â€” KayeMc76 (@KayeMc76) 
                //         a(href=url) October 3, 2020
                // else if is_youtube
                //     div
                //     .ui.fluid.embed
                //         iframe(id="ytplayer" type="text/html" width="100%" height="500" src="https://www.youtube.com/embed/#{youtube_parse}" frameborder="0" allowfullscreen)
                    // iframe(width="100%" height="600" src="https://www.youtube.com/embed/#{youtube_parse}?autoplay=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
                    // else if is_video
                    //     div
                    //     // iframe(width="100%" height="600" src="https://v.redd.it/9vk3khyb08e51/DASH_360.mp4?source=fallback" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
                    //     iframe(width="100%" height="600" src=url frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
                // else
                //     iframe(width="100%" height="500" src=url frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)        
                // .medscroll
                // 
                a.ui.circular.label(href="https://www.reddit.com#{permalink}" target="_window") r/#{subreddit}
                // .ui.big.label 
                //     i.user.outline.icon
                //     |#{author}
                // .ui.circular.label
                //     i.thumbs.up.outline.icon
                //     |#{ups}
                // a.ui.inline.header(href=url target='_window')
                //     | #{url}
                // .ui.label
                //     | #{domain}
                // .spacer
                // .nl2br
                // |!{html}
                // .spacer
                // pre
                // .nl2br
                // if viewing
                
                // +call_watson
                if watson    
                    unless tone
                        +call_tone    
                if parsed_selftext_html
                    .ui.segment
                        |!{parsed_selftext_html}
                else if selftext
                    .ui.segment
                        |{{nl2br selftext}}
                else if body
                    div
                    .ui.segment
                        |{{nl2br body}}
                // else if tone
                //     .spacer
                //     +tone
                // div(style='position:relative; padding-bottom:calc(125.00% + 44px)')
                //     iframe(src='https://gfycat.com/ifr/MeanFatAmurratsnake' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen)
                // |{{selftext}}
                // +convert
                a.ui.circular.icon.big.basic.button(href=url target='_window' title=domain)
                    i.external.icon
                    |view site 
                    |#{domain}
                // a.ui.center.aligned.header(href=url target='_window' class=post_header_class title=url) #{title}

                // .spacer
                // div
                if tone
                    +tone
                //     +session_edit_value_button key='view_section' value='tone' label='tone' icon='smile'
                each tags
                    +doc_tag
                |#{tags.length}
                .ui.input
                    i.plus.grey.icon
                    input.tag_post(type='text')
                i.code.link.icon.print_me
            
            
                
template(name='view_mode')
    i.link.zoomer.icon.toggle_view(class=toggle_view_class title=key)


template(name='emotion_mode')
    if selected_emotion
        i.huge.pointer.zoomer.icon.toggle_emotion(class="#{i2} #{color}" title=title)
        // img.ui.inline.image.toggle_emotion.zoomer.pointer(src="https://img.icons8.com/color/50/000000/#{icon}.png" class=cl title=title)
    else
        i.big.grey.pointer.zoomer.icon.toggle_emotion(class="#{i2} outline")
        // img.ui.inline.image.toggle_emotion.zoomer.pointer(src="https://img.icons8.com/ios/36/000000/#{icon}.png" class=cl title=title)


template(name='pull_reddit')
    .ui.circular.icon.button.pull
        i.reddit.icon
        
template(name='call_watson')
    .ui.circular.icon.button.pull
        i.dna.icon

template(name='convert')
    .ui.circular.icon.button.convert
        i.exchange.icon


template(name='unselect_tag')
    a.unselect_tag.ui.black.big.image.circular.label.select_term(href='#')
        if term
            img.ui.avatar.compact.image(src=term.watson.metadata.image)    
        strong #{this}

template(name='tag_selector')
    // a.ui.big.image.circular.label.pointer.select_tag.select_term(href='#' title="#{count} results" class=selector_header_class)
    a.ui.tertiary.basic.circular.button.select_tag.select_term(href='#' title="#{count} results" class=selector_header_class)
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.invert.image(src=term.watson.metadata.image)    
        | #{name}
        // small #{count}

template(name='doc_tag')
    a.ui.image.small.circular.label.pointer.select_tag.select_term(href='#' title="#{count} results" class=selector_header_class)
        if term
            img.ui.avatar.compact.image(src=term.watson.metadata.image)    
        | #{this}
        // small #{count}


template(name='duck')
    with content
        // .ui.segment
        .ui.inline.header #{Heading}
        // .item abstract #{Abstract}
        .item.abstract !{AbstractText}
        // a.ui.circular.icon.button(href=AbstractURL)
        //     // #{AbstractURL}
        //     i.large.external.icon
        img(src=Image)
        each RelatedTopics
            if Text
                // .ui.compact.button.topic
                .ui.small.tertiary.basic.button.topic
                    img.ui.tiny.inline.rounded.image(src=Icon.URL)
                    |#{Text}
                    // | {{lowered Text}}
            // .content
            //     .item #{FirstURL}
                // .item !{Result}



template(name='alpha')
    with response.queryresult
        .ui.inline.header #{datatypes}
        each split_datatypes
            .ui.button.basic.compact.circular.buton.select_datatype
                |#{this}
        .ui.list
            .item success: #{success}
            .item error: #{error}
            .item numpods: #{numpods}
            .item datatypes: #{datatypes}
                each datatypes
                    .ui.button
                        |#{this}
            .item timedout: #{timedout}
            .item timedoutpods: #{timedoutpods}
            .item timing: #{timing}
            .item parsetiming: #{parsetiming}
            .item parsetimedout: #{parsetimedout}
            .item recalculate: #{recalculate}
            .item id: #{id}
            .item host: #{host}
            .item server: #{server}
            .item related: #{related}
            .item version: #{version}
        each pods
            div
            // .ui.small.inline.middle.aligned.header.middled #{title}
            .ui.small.inline.header #{title}
            div
            .item #{scanner}
            .item id #{id}
            .item position #{position}
            .item error #{error}
            .item numsubpods #{numsubpods}
            .item subpods
            // .ui.list
            each subpods
                // .ui.small.inline.header #{title}
                img.ui.zoomer.pointer.image.alphatemp(src=img.src)
                // .item.alphatemp
                // |#{plaintext}
                // .item title: #{title}
                // .item primary: #{primary}
    // each tags
    //     .ui.label #{this}
    // .alphatemp voice: #{voice}
    //   div assumptions": {
    //     "type": "Clash",
    //     "word": "time",
    //     "template": "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead",
    //     "count": 4,
    //     "values": [
    //       {
    //         "name": "CalendarWord",
    //         "desc": " referring to a calendar computation",
    //         "input": "*C.time-_*CalendarWord-"
    
    
    
    
