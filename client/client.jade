head
    title dao
    // meta(name='viewport', content='user-scalable=yes, initial-scale=1.0, maximum-scale=1.6, width=device-width')
    meta(name='viewport', content='user-scalable=no, initial-scale=1.0, maximum-scale=1.0, width=device-width')
    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black')
    meta(name="msapplication-TileColor" content="#da532c")
    meta(name="theme-color" content="black")
    link(href="https://fonts.googleapis.com/css?family=Ubuntu:300,400&display=swap" rel="stylesheet")
    link(href="https://fonts.googleapis.com/css?family=Roboto:300,400&display=swap" rel="stylesheet")
    //- script(src="https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js")

    link(rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png")
    link(rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png")
    link(rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png")
    link(rel="manifest" href="/site.webmanifest")

    script(src='https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js')

    link(rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/fomantic-ui@2.8.4/dist/semantic.min.css")
    script(src="https://cdn.jsdelivr.net/npm/fomantic-ui@2.8.4/dist/semantic.min.js")

    
    script.
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'UA-156965333-1');

body
    +status
    +home
    

template(name='home')
    .ui.stackable.padded.grid
        .row
            .sixteen.wide.column
                // if selected_tags
                //     if many_tags
                //         a#clear_tags.ui.black.icon.compact.large.button.select_term
                //             i.remove.icon
                each selected_tags
                    +unselect_tag
                .ui.left.icon.large.input 
                    i.search.icon
                    input.search_title(type='text' autofocus='')
                each tag_results
                    +tag_selector
                // .row
                //     .four.wide.right.aligned.column
                .ui.inline.small.header(title='results') #{doc_count}
            .sixteen.wide.column.scrolling
                if one_post
                    .ui.stackable.centered.one.column.grid
                        each docs
                            +post_card
                else if two_posts
                    .ui.stackable.centered.two.column.grid
                        each docs
                            +post_card
                else
                    .ui.stackable.centered.four.column.grid
                        each docs
                            .column
                                +post_card
         
         
template(name='post_card')         
    // .ui.fluid.
    if watson.metadata.image
        img.ui.image.invert(src=watson.metadata.image)    
    // else
    //     img.ui.image(src=url)
    .content
        a.ui.header(href=url target='_window') #{title}
        if one_post
            .medscroll
                iframe.invert(width="100%" height="500" src=url frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
        else if two_posts
            .medscroll
                iframe.invert(width="100%" height="500" src=url frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
        if one_post
            each tags 
                a.ui.basic.large.label.add_tag #{this}
        else if two_posts
            each tags 
                a.ui.basic.large.label.add_tag #{this}
        else
            each seven_tags 
                a.ui.basic.large.label.add_tag #{this}
     
                    
template(name='pull_reddit')
    .ui.circular.icon.basic.button.pull
        i.reddit.icon
        
template(name='call_watson')
    .ui.circular.icon.basic.button.pull
        i.dna.icon


template(name='unselect_tag')
    a.unselect_tag.ui.black.big.image.label.select_term(href='#')
        if term
            img.ui.avatar.compact.image(src=term.watson.metadata.image)    
        strong #{this}

template(name='tag_selector')
    a.ui.big.image.basic.label.select_tag.select_term(href='#' title="#{count} results")
        if term
            img.ui.avatar.compact.image(src=term.watson.metadata.image)    
        strong #{name}
        // small #{count}


